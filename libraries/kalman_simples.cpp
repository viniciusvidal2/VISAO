class Kalman_simples{

public:
  //////////////////////////////////////////////////////////////////////////////////////////////////////////
  void init(double error_measurement, double measurement, double error_estimate, double estimate){
    /// Erros de estimativa e de medicao
    P_kp = error_estimate;
    P_k  = error_estimate;
    R    = error_measurement;
    /// Primeira estimativa com inicio do sensor - offset
    X_kp = estimate;
    Y    = measurement;
  }
  //////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////// GETS ///////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////////////////////////////
  double get_estimate(){
    return X_k;
  }
  //////////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////// PRINCIPAL ////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////////////////////////////
  double filter(double estimate_update, double measurement, double error_measurement){
    /// Atualiza os estados do processo Xp do filtro com a leitura vinda da imagem(modelo)
    update_process_state(estimate_update);
    /// Calculo do ganho de Kalman com o que temos de covariancias
    calculate_KG(error_measurement);
    /// Atualiza estimativa frente ao novo ganho de Kalman e a nova leitura do sensor
    update_estimate(measurement);
    /// Nova covariancia da estimativa
    update_estimate_covariance();

    // Retorna o valor da estimativa
    return X_k;
  }
  //////////////////////////////////////////////////////////////////////////////////////////////////////////

private:

  //////////////////////////////////////////////////////////////////////////////////////////////////////////
  void update_process_state(double est_up){
    // NOTA: a matriz de covariancia do processo nao e alterada aqui, somente na atulaizacao vinda da
    // iteracao anterior
    P_kp   = P_k;
    deltaX = est_up;
    // Pega o estimado anteriormente e coloca no estado do processo
    X_kp   = X_k;
    X_kp  += deltaX;
  }
  //////////////////////////////////////////////////////////////////////////////////////////////////////////
  void calculate_KG(double error_meas){
    // Anotando o erro do gps aqui que muda com o tempo
    R = error_meas;
    // Ganho de Kalman voando aqui
    KG  = P_kp/(P_kp + R);
  }
  //////////////////////////////////////////////////////////////////////////////////////////////////////////
  void update_estimate(double meas){
    Y = meas; // Medido
    X_k = X_kp + KG*( Y - X_kp ); // Nova estimativa / estado do sistema
  }
  //////////////////////////////////////////////////////////////////////////////////////////////////////////
  void update_estimate_covariance(){
    P_k = (1 - KG)*P_kp;
  }
  //////////////////////////////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Variaveis privadas - Retiradas de ILectureOnline no youtube
  //////////////////////////////////////////////////////////////////////////////////////////////////////////
  double KG, X_kp, X_k, deltaX, P_kp, P_k, R, Y;

};
